service: ${file(config.yml):service}

provider:
  name: aws
  region: ${file(config.yml):region}
  runtime: nodejs8.10
  stage: ${file(config.yml):stage}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:*"
      Resource: '*'
  memorySize: 128
  versionFunctions: false
  environment:
      SERVICETABLENAME: ${self:custom.serviceTableName}
      VERSIONTABLENAME: ${self:custom.versionTableName}
      LAMBDACACHE : true # NOTE! true is String => 'true'

custom:
  serviceTableName: ${self:service}-${self:provider.stage}-swagger-dynamo-serviceinfo
  versionTableName: ${self:service}-${self:provider.stage}-swagger-dynamo-versioninfo

package:
  exclude:
    - test/**
    - db/**
    - coverage/**
    - yarn.locak
    - .git/**

functions:
  getSericeList:
    name: ${self:service}-${self:provider.stage}-lambda-getServices
    handler: src/serviceHandler.getServices 
    events:
      - http:
          path: services
          method: get
          cors: true

  getService:
    name: ${self:service}-${self:provider.stage}-lambda-getServiceInfo
    handler: src/serviceCRUD.get 
    events:
      - http:
          path: services/{id}
          method: get
          cors: true
          request:
            parameters:
              paths:
                id: true
  postService:
    name: ${self:service}-${self:provider.stage}-lambda-postServiceInfo
    handler: src/serviceCRUD.post
    events:
      - http:
          path: services/
          method: post
          cors: true

  putService:
    name: ${self:service}-${self:provider.stage}-lambda-putServiceInfo
    handler: src/serviceCRUD.put
    events:
      - http:
          path: services/{id}/name/{name}
          method: put
          cors: true
          request:
            parameters:
              paths:
                id: true
                name: true

  deleteService:
    name: ${self:service}-${self:provider.stage}-lambda-deleteServiceInfo
    handler: src/serviceCRUD.delete
    events:
      - http:
          path: services/{id}
          method: delete
          cors: true
          request:
            parameters:
              paths:
                id: true

resources:
  Resources:
    ServiceInfoDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.serviceTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    VersionInfoDynamoDB:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:custom.versionTableName}
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: version
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
          -
            AttributeName: version
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        